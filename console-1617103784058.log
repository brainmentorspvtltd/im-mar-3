function adder(x,y){
    'use strict';
    x = x || 0;
    y = y || 0;
    z =  x + y; // global
    return z;
}
undefined
adder(1000,2000);
VM27:5 Uncaught ReferenceError: z is not defined
    at adder (<anonymous>:5:7)
    at <anonymous>:1:1
adder @ VM27:5
(anonymous) @ VM68:1
'use strict';
function adder(x,y){
    
    x = x || 0;
    y = y || 0;
    z =  x + y; // global
    return z;
}
"use strict"
var x = 100;
undefined
typeof x;
"number"
x();
VM159:1 Uncaught TypeError: x is not a function
    at <anonymous>:1:1
(anonymous) @ VM159:1
var a = [10,20];
undefined
a.length;
2
a = null;
null
a.length;
VM274:1 Uncaught TypeError: Cannot read property 'length' of null
    at <anonymous>:1:3
(anonymous) @ VM274:1
function complex(num){
console.log('Complex Logic ');
    for(let i =1; i<=1000000;i++){
    for(let j = 1; j<=10000; j++){}
}
return num**3
}
undefined
complex(3);
VM489:2 Complex Logic 
27
complex(5);
VM489:2 Complex Logic 
125
function complex(num){
console.log('Complex Logic ');
    for(let i =1; i<=1000000;i++){
    for(let j = 1; j<=20000; j++){}
}
return num**3
}
undefined
complex(5);
VM545:2 Complex Logic 
125
var cache = {};
function complex(num){
if(cache[num]){
console.log('Coming from the Cache ', cache[num]);
return ;
}
console.log('Complex Logic ');
    for(let i =1; i<=1000000;i++){
    for(let j = 1; j<=20000; j++){}
}
cache[num] = num**3;
return cache[num];
}
undefined
cache;
{}
complex(5);
VM737:7 Complex Logic 
125
cache;
{5: 125}
complex(5);
VM737:4 Coming from the Cache  125
undefined
var cache = {};
function complex(num){
if(cache[num]){
console.log('Coming from the Cache ', cache[num]);
return cache[num];
}
console.log('Complex Logic ');
    for(let i =1; i<=1000000;i++){
    for(let j = 1; j<=20000; j++){}
}
cache[num] = num**3;
return cache[num];
}
undefined
complex(5);
VM812:7 Complex Logic 
125
complex(5);
VM812:4 Coming from the Cache  125
125
complex(3);
VM812:7 Complex Logic 
27
function summary(productDetails, orderDetails, customerDetails){
// Invoke the fn and get the result and make summary of it and return it
}
undefined
function summary(){
    return function orderDetails(oid){
    return function productDetails(pid){
         
    return function customerdetails(cid){
        return  oid + pid + cid;
}
}
}
}
undefined
summary()("OrderId 1001")("Product Id 10")("Customer Id 1");
"OrderId 1001Product Id 10Customer Id 1"
function total(x,y){
return x + y + z;
}
undefined
var z = 100;
undefined
total(10,20);
130
z= 10000;
10000
total(10,20);
10030
function add(a,b){
    return a + b;
}
undefined
const adder = (a,b)=>a+b; // Arrow Function
VM1756:1 Uncaught SyntaxError: Identifier 'adder' has already been declared
const adder2 = (a,b)=>a+b; // Arrow Function
undefined
typeof adder2;
"function"
adder2(10,20);
30
const w = x=>x**3;
undefined
w(4);
64
const e = ()=>9999;
undefined
e();
9999
const e1 = (a,b)=>{
    console.log(a,b);
    return a + b;
}
undefined
e1(100,200);
VM2037:2 100 200
300
const e1 = (...a)=>{
    console.log(a);
    //return a + b;
}
VM2127:1 Uncaught SyntaxError: Identifier 'e1' has already been declared
const e11 = (...a)=>{
    console.log(a);
    //return a + b;
}
undefined
e11(10,20,30);
VM2131:2 (3)Â [10, 20, 30]
undefined
